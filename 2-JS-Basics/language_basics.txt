Design and coding resources page: http://codingheroes.io/resources/

1 - Cómo insertar código Javascript en la pagina:
  
  1.1 Inline code (Mala Practica): directamente dentro de <script>...</script>
  1.2 External file: <script src="script.js"></script>

2 - Comentarios:
  Linea: //
  Multilinea: /* */

3 - Variables and data types (notación CamelCase)

    Sirven como contenedores de valores.
    Tipos (ver primitives_data_types.png):
      String: una secuencia de caracteres
      Number: siempre son en coma flotante, no como en Java 
      Boolean: true / false 
      Undefined: means a variable has been declared but has not yet been assigned a value
      Null:  is an assignment value. It can be assigned to a variable as a representation of no value

4 - Type Coercion / Variable Mutation
  Type Coercion: se llama asi a la conversión automatica de tipos que realiza Javascript.
    Undefined, 0, null or "" are COERCED to false

  Variable Mutation: cambiamos de valor la variable y puede que tambien de tipo.

5 - Operators: hay que tener en cuenta operator precedence y associativity
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

  +, -, *,....

  Usaremos () para agrupar operadores y cambiar su precedence.

6 - Diferencia entre == vs === y != vs !==
  == does type Coercion
  === es estricto, aqui no hay conversion de tipos (Buena practica, evita bugs)

7 - Operadores para control de flujo (toma de decisiones):

  if / else if / else 

  switch // Nos ahorramos un monton de if else / if else...
    switch (key) {
        case value:
          ....        
          break;
        ....
        default:
          break;
    }

8 - Functions: evita duplicar codigo (DRY, Don't repeat yourself principle)

  function name(params) {
    ....
  }

9 - Statements vs expressions
  Los statements realizan una accion / operacion sin producir un valor de output inmediato
  Las expressions si que generan un valor inmediato de salida.

    // Function Statements
    function someFunction(par) {
      // code
    }

    // Function Expression
    var someFun = function (par) {
      // code
    }

  10 - Arrays: colecciones de elementos (0 based index)
    Definidos con [item1, ...., itemN] o new Array(item1, ...., itemN)
    Metodos tipicos:
      - push: añade un elemento al final de la lista
      - unshift: añade un elemento al inicio de la lista
      - pop: saca de la lista el ultimo elemento
      - shift: saca de la lista el primer elemento
      - indexOf: devuelve la posición del primer elemento coincidente con el parametro que le pasamos
                 o -1 sino lo encuentra.
      - map: para realizar una transformacion sobre cada elemento y devolver un nuevo array del tipo que indicamos.
      - splice: para eliminar elementos del array, indicando start position y numero de elementos.
    Propiedades tipicas:
      - length: numero de elementos del array.

  12 - Objects / properties / methods
    Tenemos pares key-value denominados properties, y ademas no tenemos orden definido, como si pasaba en las colecciones (arrays)
    var obj = {
      key1: value1,
      ...
      keyN: valueN
    }

    Tambien lo podemos crear asi:
      var obj = new Object();
      obj.key1 = ....
      obj['key2'] =....

    Acceso a las propiedades:
      obj.key o obj['key']

    Methods: funciones contenidas en el objeto por ejemplo:
      var obj = {
        key1: value1
        method1: function(params...) { // Son equivalentes a las function expressions
          return this.key1.... // Keyword this, hace referencia (scope) al objeto actual
        },
        ...
      }

  13 - Loops and iteration

    for (let index = 0; index < array.length; index++) {
      ...
    }    
  
    while (condition) {
      ...
    }

    break: interrumpe el bucle actual y lo da por terminado.
    continue: saltamos a la siguiente iteracion.

    forEach loop
      
      array.forEach(function(current, index, array) {
        ...
      }
