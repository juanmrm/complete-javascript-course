ES2015 y ES6 se refieren a la misma versión de Javascript publicada en 2015.
Se le llama también ES6 porque se ha lanzado después de la ES5 publicada en 2009.

Mas info en http://es6-features.org

1 - Let and Const

  let: equivale al antiguo var, valores que pueden mutar, cambiar.
  const: para constantes (variables inmutables), valores que no pueden cambiar.

  Diferencias: 
    - var tiene scope function mientras que let y const tiene scope block
    - una variable var se puede utilizar antes de ser declarada (temporal dead zone and hoisting), no vale con let y const.
    - podemos declarar la misma variable 2 veces pero no podemos hacerlo con let o const

2 - Blocks and IIFEs (Data privacy)

  Ahora disponemos de una forma muy sencilla de crear IIFEs.
  Para crear un bloque hacemos { codigo... }

3 - Strings

    - String Templates. Mas rápido y fácil de usar. Ponemos ` en lugar de " o ' y marcamos los placeholders con ${...},
        p.e: console.log(`He is ${calcAge(year)} years old`).

    - New methods: 
        startsWith: ver si empieza por...
        endsWith: ver si termina en...
        includes: ver si incluye...
        repeat: repetir un string n veces

4 -  Arrow Functions

    Para escribir menos codigo en tareas tipicas como iterar sobre un array y devolver un resultado.
      - La mas simple con 1 solo argumento y 1 linea de codigo que lleva implícito el return
         array.map(el => ...);
      - Con mas argumentos, 2 por ejemplo
         array.map((el, index) => ...);
      - Con más argumentos y más de una linea de codigo
         array.map((el, index) => { 
           ...
           return value;
         });

    p.e: ages6 = years.map((el, index) => `Age element ${index + 1}: ${new Date().getUTCFullYear() - el}.`);

    Lexical 'this' keyword: las arrow function comparten el this de la funcion que las envuelve.

5 - De-structuring
  - Siempre hay 2 partes implicadas en una destructuracion.
    De-structuring fuente: parte derecha de la asignación =. Es la fuente te los valores que van a ser desestructurados.
    De-structuring destino: parte izquierda de la asignación=. Es el patrón de la desestructuración.

    - Object de-structuring pattern: 
        function buildAnimal({accessory = "", animal = "cat", color = 'rainbow', hairType = 'straight'} = {}){...}
        let {address: {zipcode, street, number}} = person;
        let {name = "default name"} = obj;

    - Array de-structuring pattern:
      var arr = ["one", "two", "three", "four"];
      var [first, second] = arr; //Only take first 2 elements
      var [,,third, four] = arr; //Only take the last 2 elements
      var [one, two, three, four] = arr //Extract all elements
    
    - Tambien funciona en cualquier otro objeto Iterable como Map, Set o String.
      var [a, b] = new Set([1,2]); //a = 1, b = 2;
      var [a, b] = new Map([[1,2], [2,3]]); //a= [1,2], b = [2,3]
      var [x, y] = "xyz"; //x = "x", y = "y"

    - Multiple variables declaration & initialization
      let [a, b, c, d] = [2, 3, { id: 4 }, 5];

    - Swapping
      function swap(arr, i, j){
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }


6 - Arrays
    Nuevos metodos y formas de iterar.

    Para convertir un objeto lista a array:
      ES5: boxesArray5 = Array.prototype.slice.call(boxes); // Hack para transformar nodeList a array
      ES6: const boxesArray6 = Array.from(boxes);

    Bucles: el problema con forEach y map es que no podemos usar break o continue keyword.
      En ES5 tendriamos que utilizar un for loop tradicional. 
      En ES6 usaremos un forof loop
        for (const cur of object) {...}

    Para buscar elementos: 
      - findIndex
      - find

7 - Spread operator: used in function call
  - Un manera muy conveniente de expandir los elementos de un objeto iterable (p.e array) u objecto en sitios como argumentos o llamadas a funciones
    p.e: en ES5: var sum = addFourAges.apply(null, ages); // Llama a la funcion pasandole el array como argumento
         en ES6: const sum = addFourAges(...ages);
                 const bigFamily = [...familySmith, 'Lily', ...familyMiller];

  - Clonar un objeto o Array (shallow clone version, only go one depth level)
    En vez de let cloneObj = Object.assign({}, srcObj) -> let cloneObj = {...srcObj}
    En vez de let cloneArr = srcArr.slice(0) o Array.from(srcArr) -> let cloneArr = [...srcArr]

  - Convertir un objeto iterable a Array
    Convertir un Set o Map a un array usando el Spread Operator
    p.e: Remove duplicates from given array problem ?

    const removeDuplicates = arr => {
      const set = new Set(arr);
      return [...set];
    }

  - Fusionar Arrays
    Array.prototype.concat() devuelve un nuevo array donde se añaden los elementos del array adicional al final del array original sin modificar el array original
      var arr3 = arr1.contcat(arr2)
    
    Array.prototype.unshift() devuelve un array donde se añaden los elementos del array adicional al principio del array original modificando el array original
      Array.prototype.unshift.apply(arr1, arr2)

    Spread Syntax
      var arr3 = [...arr1, ...arr2]. Los arrays originales no se ven alterados

8 - Rest Operator

  Es una instancia de Array con lo que podemos utilizar sobre ella los metodos de Array.

  En una statement usado junto con destructuring
    const team = ['Juan', 'Pedro', 'Raul']
    const [captain, ...players] = team

  En una function nos permite pasar un numero arbitrario de parametros y utilizar estos argumentos en la funcion
   p.e: function isFullAge6(limit, ...years) {...}

9 - Default Parameters

  Cuando queremos que determinados argumentos de la funcion tengan valores por defecto.
    p.e:  function SmithPerson(firsName, yearOfBirth, lastName = 'Smith', nationality = 'american') {...}

10 - Sets / Maps

  Nueva estructura de datos key-value de ES6.
  Crear let map = new Map();
  Añadimos: map.set(key, value), donde key puede ser string, number, boolean...
  Recuperar: map.get(key);
  Tamaño: map.size
  Eliminar: map.delete(key)
  Comprobar si existe una clave: map.has(key)
  Eliminar todos los elementos: map.clear()

  Iteraremos con forEach o con forof loops
    for (let [ key, val ] of m.entries())
      console.log(key + " = " + val)

  Por qué un Map es mejor estructura de datos que un Object?
    - En un Map podemos utilizar cualquier cosa como key no solo Strings
    - Son Iterables
    - Sencillo obtener el tamaño
    - Sencillo añadir / eliminar elementos

11 - Classes:

  No añaden nada nuevo al lenguaje. Son sintactic sugar sobre la forma en la que hacemos herencia y prototipado,
  en Javascript, pero es más sencillo de escribir.

  class Person {
    constructor(...)

    method1() {...}
  }

  Tenemos disponible:
    - inheritance
        En ES5: Athlete5.prototype = Object.create(Person5.prototype); // Person5 es la clase padre de Athlete5 que es la subclase.
        En ES6: class Athlete6 extends Person6 y en el constructor usaremos super(...)

    - simple base class access
        super.xxxx

    - static methods
        metodos que están vinculados a la clase, no a la instancia de la clase.

    - getter / setter methods

  Consideraciones importantes:
    - Class definitions are not hoisted
    - Solo podemos añadir metodos a las clases, no propiedades.
    (Prototypes having data properties is generally considered an anti-pattern, so this just enforces a best practice.)

13 - How to use ES2015 / ES6 Today

  https://babeljs.io/
  npm install --save-dev babel-cli babel-preset-es2015 babel-polyfill

  .\node_modules\.bin\babel --presets es2015 my-challenge-solution.js --out-file transpiled.js
  
  En el html:
    <script src="polyfill.min.js"></script>
    <script src="transpiled.js"></script>