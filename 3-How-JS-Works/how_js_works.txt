1 - Execution Context.
  Se trata del entorno / contexto de ejecuci贸n donde se almancenan nuestras variables y donde se ejecuta nuestro codigo.
  Global -> execution_context_global.png.

     (CREATION FASE - STEP 1)
2  - Execution Context in detail (execution_context_in_detail.png, execution_context_VO_creation_phase.png)
  
  Contiene 3 propiedades:
    - Variable Object (VO): contiene los parametros pasados, declaracion de variables y de funciones (functions declarations).
    - Scope Chain: contiene las VO actuales y las VO's de todos sus padres.
    - Determinar el valor de la variable "this".

  Hoisting: variables y funciones estan disponibles durante la fase de ejecuci贸n.
    Las funciones quedan totalmente definidas antes de que empiece la fase de ejecuci贸n (functions declarations)
    Las variables se inicializan a undefined.

    IMPORTANTE: las functions expressions no se van a almancenar durante la fase de creacion por lo que si hacemos esto dara error:
      
      retirement(1956); // NO funciona, porque es una function expression, no una declaration

      var retirement = function(year) {
        console.log(65 - (new Date().getFullYear() - year));
      }

    (CREATION FASE - STEP 2)
3 - Scoping Chain (scoping_scope_chain.png, scope_chain-vs-execution_stack.png, scope-chain-example.png)

    En Javascript la unica forma de crear un nuevo contexto (scope), es definir una nueva funcion. 
    En otro lenguajes de programaci贸n se crean nuevos scopes con los if/else for/while...en Javascript no.

    (CREATION FASE - STEP 3)
4 - Determining and setting value of 'THIS' keyword

    Regular funtion call: this apunta al Global Object (the window object, in the browser)
    
    Method call: this apunta al object sobre el que se esta invocando el metodo
    (function attached to an object)